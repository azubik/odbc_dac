{*******************************************************}
{                                                       }
{       "sqlext.h"                                      }
{                                                       }
{   Translated to Object Pascal by Andrey Zubik         }
{   e-mail: andrey.zubik@gmail.com                      } 
{                                                       }
{*******************************************************}

unit odbcsqlext;

interface
uses
  odbcsql, odbcsqltypes;


const

  { generally useful constants }
  SQL_SPEC_MAJOR = 3;                             // Major version of specification  */
  SQL_SPEC_MINOR = 51;                            // Minor version of specification  */
  SQL_SPEC_STRING = '03.51';                      // String constant for version */

  SQL_SQLSTATE_SIZE = 5;                          // size of SQLSTATE */
  SQL_MAX_DSN_LENGTH = 32;                        // maximum data source name size */

  SQL_MAX_OPTION_STRING_LENGTH = 256;

  { return code SQL_NO_DATA_FOUND is the same as SQL_NO_DATA }
  SQL_NO_DATA_FOUND = SQL_NO_DATA;

  { an end handle type }
  SQL_HANDLE_SENV = 5;

  { env attribute }
  SQL_ATTR_ODBC_VERSION = 200;
  SQL_ATTR_CONNECTION_POOLING = 201;
  SQL_ATTR_CP_MATCH = 202;

  { values for SQL_ATTR_CONNECTION_POOLING }
  SQL_CP_OFF = Cardinal(0);
  SQL_CP_ONE_PER_DRIVER = Cardinal(1);
  SQL_CP_ONE_PER_HENV = Cardinal(2);
  SQL_CP_DEFAULT = SQL_CP_OFF;

  { values for SQL_ATTR_CP_MATCH }
  SQL_CP_STRICT_MATCH = Cardinal(0);
  SQL_CP_RELAXED_MATCH = Cardinal(1);
  SQL_CP_MATCH_DEFAULT = SQL_CP_STRICT_MATCH;

  { values for SQL_ATTR_ODBC_VERSION }
  SQL_OV_ODBC2 = Cardinal(2);
  SQL_OV_ODBC3 = Cardinal(3);

  { connection attributes }
  SQL_ACCESS_MODE = 101;
  SQL_AUTOCOMMIT = 102;
  SQL_LOGIN_TIMEOUT = 103;
  SQL_OPT_TRACE = 104;
  SQL_OPT_TRACEFILE = 105;
  SQL_TRANSLATE_DLL = 106;
  SQL_TRANSLATE_OPTION = 107;
  SQL_TXN_ISOLATION = 108;
  SQL_CURRENT_QUALIFIER = 109;
  SQL_ODBC_CURSORS = 110;
  SQL_QUIET_MODE = 111;
  SQL_PACKET_SIZE = 112;

  { connection attributes with new names }
  SQL_ATTR_ACCESS_MODE = SQL_ACCESS_MODE;
  SQL_ATTR_AUTOCOMMIT = SQL_AUTOCOMMIT;
  SQL_ATTR_CONNECTION_TIMEOUT = 113;
  SQL_ATTR_CURRENT_CATALOG = SQL_CURRENT_QUALIFIER;
  SQL_ATTR_DISCONNECT_BEHAVIOR = 114;
  SQL_ATTR_ENLIST_IN_DTC = 1207;
  SQL_ATTR_ENLIST_IN_XA = 1208;
  SQL_ATTR_LOGIN_TIMEOUT = SQL_LOGIN_TIMEOUT;
  SQL_ATTR_ODBC_CURSORS = SQL_ODBC_CURSORS;
  SQL_ATTR_PACKET_SIZE = SQL_PACKET_SIZE;
  SQL_ATTR_QUIET_MODE = SQL_QUIET_MODE;
  SQL_ATTR_TRACE = SQL_OPT_TRACE;
  SQL_ATTR_TRACEFILE = SQL_OPT_TRACEFILE;
  SQL_ATTR_TRANSLATE_LIB = SQL_TRANSLATE_DLL;
  SQL_ATTR_TRANSLATE_OPTION = SQL_TRANSLATE_OPTION;
  SQL_ATTR_TXN_ISOLATION = SQL_TXN_ISOLATION;

  SQL_ATTR_CONNECTION_DEAD = 1209;                // GetConnectAttr only


  {
     ODBC Driver Manager sets this connection attribute to a unicode driver
   (which supports SQLConnectW) when the application is an ANSI application
   (which calls SQLConnect, SQLDriverConnect, or SQLBrowseConnect).
   This is SetConnectAttr only and application does not set this attribute
   This attribute was introduced because some unicode driver's some APIs may
   need to behave differently on ANSI or Unicode applications. A unicode
   driver, which  has same behavior for both ANSI or Unicode applications,
   should return SQL_ERROR when the driver manager sets this connection
   attribute. When a unicode driver returns SQL_SUCCESS on this attribute,
   the driver manager treates ANSI and Unicode connections differently in
   connection pooling.
  }
  SQL_ATTR_ANSI_APP = 115;

  { SQL_ACCESS_MODE options }
  SQL_MODE_READ_WRITE = Cardinal(0);
  SQL_MODE_READ_ONLY = Cardinal(1);
  SQL_MODE_DEFAULT = SQL_MODE_READ_WRITE;

  { SQL_AUTOCOMMIT options }
  SQL_AUTOCOMMIT_OFF = Cardinal(0);
  SQL_AUTOCOMMIT_ON = Cardinal(1);
  SQL_AUTOCOMMIT_DEFAULT = SQL_AUTOCOMMIT_ON;

  { SQL_LOGIN_TIMEOUT options }
  SQL_LOGIN_TIMEOUT_DEFAULT = Cardinal(15);

  { SQL_OPT_TRACE options }
  SQL_OPT_TRACE_OFF = Cardinal(0);
  SQL_OPT_TRACE_ON = Cardinal(1);
  SQL_OPT_TRACE_DEFAULT = SQL_OPT_TRACE_OFF;
  SQL_OPT_TRACE_FILE_DEFAULT = '\\SQL.LOG';

  { SQL_ODBC_CURSORS options }
  SQL_CUR_USE_IF_NEEDED = Cardinal(10);
  SQL_CUR_USE_ODBC = Cardinal(11);
  SQL_CUR_USE_DRIVER = Cardinal(12);
  SQL_CUR_DEFAULT = SQL_CUR_USE_DRIVER;

  { values for SQL_ATTR_DISCONNECT_BEHAVIOR }
  SQL_DB_RETURN_TO_POOL = Cardinal(0);
  SQL_DB_DISCONNECT = Cardinal(1);
  SQL_DB_DEFAULT = SQL_DB_RETURN_TO_POOL;

  { values for SQL_ATTR_ENLIST_IN_DTC }
  SQL_DTC_DONE = LongInt(0);

  { values for SQL_ATTR_CONNECTION_DEAD }
  SQL_CD_TRUE = LongInt(1);                       { Connection is closed/dead }
  SQL_CD_FALSE = LongInt(0);                      { Connection is open/available }

  { values for SQL_ATTR_ANSI_APP }
  SQL_AA_TRUE = LongInt(1);                       { the application is an ANSI app }
  SQL_AA_FALSE = LongInt(0);                      { the application is a Unicode app }

  { statement attributes }
  SQL_QUERY_TIMEOUT = 0;
  SQL_MAX_ROWS = 1;
  SQL_NOSCAN = 2;
  SQL_MAX_LENGTH = 3;
  SQL_ASYNC_ENABLE = 4;                           { same as SQL_ATTR_ASYNC_ENABLE }
  SQL_BIND_TYPE = 5;
  SQL_CURSOR_TYPE = 6;
  SQL_CONCURRENCY = 7;
  SQL_KEYSET_SIZE = 8;
  SQL_ROWSET_SIZE = 9;
  SQL_SIMULATE_CURSOR = 10;
  SQL_RETRIEVE_DATA = 11;
  SQL_USE_BOOKMARKS = 12;
  SQL_GET_BOOKMARK = 13;                          { GetStmtOption Only }
  SQL_ROW_NUMBER = 14;                            { GetStmtOption Only }

  { statement attributes for ODBC 3.0 }
  SQL_ATTR_ASYNC_ENABLE = 4;
  SQL_ATTR_CONCURRENCY = SQL_CONCURRENCY;
  SQL_ATTR_CURSOR_TYPE = SQL_CURSOR_TYPE;
  SQL_ATTR_ENABLE_AUTO_IPD = 15;
  SQL_ATTR_FETCH_BOOKMARK_PTR = 16;
  SQL_ATTR_KEYSET_SIZE = SQL_KEYSET_SIZE;
  SQL_ATTR_MAX_LENGTH = SQL_MAX_LENGTH;
  SQL_ATTR_MAX_ROWS = SQL_MAX_ROWS;
  SQL_ATTR_NOSCAN = SQL_NOSCAN;
  SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17;
  SQL_ATTR_PARAM_BIND_TYPE = 18;
  SQL_ATTR_PARAM_OPERATION_PTR = 19;
  SQL_ATTR_PARAM_STATUS_PTR = 20;
  SQL_ATTR_PARAMS_PROCESSED_PTR = 21;
  SQL_ATTR_PARAMSET_SIZE = 22;
  SQL_ATTR_QUERY_TIMEOUT = SQL_QUERY_TIMEOUT;
  SQL_ATTR_RETRIEVE_DATA = SQL_RETRIEVE_DATA;
  SQL_ATTR_ROW_BIND_OFFSET_PTR = 23;
  SQL_ATTR_ROW_BIND_TYPE = SQL_BIND_TYPE;
  SQL_ATTR_ROW_NUMBER = SQL_ROW_NUMBER;           {GetStmtAttr}
  SQL_ATTR_ROW_OPERATION_PTR = 24;
  SQL_ATTR_ROW_STATUS_PTR = 25;
  SQL_ATTR_ROWS_FETCHED_PTR = 26;
  SQL_ATTR_ROW_ARRAY_SIZE = 27;
  SQL_ATTR_SIMULATE_CURSOR = SQL_SIMULATE_CURSOR;
  SQL_ATTR_USE_BOOKMARKS = SQL_USE_BOOKMARKS;

  { New defines for SEARCHABLE column in SQLGetTypeInfo }
  SQL_COL_PRED_CHAR = 1;                          // = SQL_LIKE_ONLY;
  SQL_COL_PRED_BASIC = 2;                         // = SQL_ALL_EXCEPT_LIKE;

  { whether an attribute is a pointer or not }
  SQL_IS_POINTER = (-4);
  SQL_IS_UINTEGER = (-5);
  SQL_IS_INTEGER = (-6);
  SQL_IS_USMALLINT = (-7);
  SQL_IS_SMALLINT = (-8);

  { the value of SQL_ATTR_PARAM_BIND_TYPE }
  SQL_PARAM_BIND_BY_COLUMN = Cardinal(0);
  SQL_PARAM_BIND_TYPE_DEFAULT = SQL_PARAM_BIND_BY_COLUMN;

  { SQL_QUERY_TIMEOUT options }
  SQL_QUERY_TIMEOUT_DEFAULT = Cardinal(0);

  { SQL_MAX_ROWS options }
  SQL_MAX_ROWS_DEFAULT = Cardinal(0);

  { SQL_NOSCAN options }
  SQL_NOSCAN_OFF = Cardinal(0);                   {      1.0 FALSE }
  SQL_NOSCAN_ON = Cardinal(1);                    {      1.0 TRUE }
  SQL_NOSCAN_DEFAULT = SQL_NOSCAN_OFF;

  { SQL_MAX_LENGTH options }
  SQL_MAX_LENGTH_DEFAULT = Cardinal(0);

  { values for SQL_ATTR_ASYNC_ENABLE }
  SQL_ASYNC_ENABLE_OFF = Cardinal(0);
  SQL_ASYNC_ENABLE_ON = Cardinal(1);
  SQL_ASYNC_ENABLE_DEFAULT = SQL_ASYNC_ENABLE_OFF;

  { SQL_BIND_TYPE options }
  SQL_BIND_BY_COLUMN = Cardinal(0);
  SQL_BIND_TYPE_DEFAULT = SQL_BIND_BY_COLUMN;     { Default value }

  { SQL_CONCURRENCY options }
  SQL_CONCUR_READ_ONLY = 1;
  SQL_CONCUR_LOCK = 2;
  SQL_CONCUR_ROWVER = 3;
  SQL_CONCUR_VALUES = 4;
  SQL_CONCUR_DEFAULT = SQL_CONCUR_READ_ONLY;      { Default value }

  { SQL_CURSOR_TYPE options }
  SQL_CURSOR_FORWARD_ONLY = Cardinal(0);
  SQL_CURSOR_KEYSET_DRIVEN = Cardinal(1);
  SQL_CURSOR_DYNAMIC = Cardinal(2);
  SQL_CURSOR_STATIC = Cardinal(3);
  SQL_CURSOR_TYPE_DEFAULT = SQL_CURSOR_FORWARD_ONLY; { Default value }

  { SQL_ROWSET_SIZE options }
  SQL_ROWSET_SIZE_DEFAULT = Cardinal(1);

  { SQL_KEYSET_SIZE options }
  SQL_KEYSET_SIZE_DEFAULT = Cardinal(0);

  { SQL_SIMULATE_CURSOR options }
  SQL_SC_NON_UNIQUE = Cardinal(0);
  SQL_SC_TRY_UNIQUE = Cardinal(1);
  SQL_SC_UNIQUE = Cardinal(1);

  { SQL_RETRIEVE_DATA options }
  SQL_RD_OFF = Cardinal(0);
  SQL_RD_ON = Cardinal(1);
  SQL_RD_DEFAULT = SQL_RD_ON;

  { SQL_USE_BOOKMARKS options }
  SQL_UB_OFF = Cardinal(0);
  SQL_UB_ON = Cardinal(1);
  SQL_UB_DEFAULT = SQL_UB_OFF;

  { New values for SQL_USE_BOOKMARKS attribute }
  SQL_UB_FIXED = SQL_UB_ON;
  SQL_UB_VARIABLE = Cardinal(2);

  { extended descriptor field }
  SQL_DESC_ARRAY_SIZE = 20;
  SQL_DESC_ARRAY_STATUS_PTR = 21;
  SQL_DESC_AUTO_UNIQUE_VALUE = 11;                // = SQL_COLUMN_AUTO_INCREMENT;
  SQL_DESC_BASE_COLUMN_NAME = 22;
  SQL_DESC_BASE_TABLE_NAME = 23;
  SQL_DESC_BIND_OFFSET_PTR = 24;
  SQL_DESC_BIND_TYPE = 25;
  SQL_DESC_CASE_SENSITIVE = 12;                   // = SQL_COLUMN_CASE_SENSITIVE
  SQL_DESC_CATALOG_NAME = 17;                     // = SQL_COLUMN_QUALIFIER_NAME;
  SQL_DESC_CONCISE_TYPE = 2;                      // = SQL_COLUMN_TYPE;
  SQL_DESC_DATETIME_INTERVAL_PRECISION = 26;
  SQL_DESC_DISPLAY_SIZE = 6;                      // = SQL_COLUMN_DISPLAY_SIZE;
  SQL_DESC_FIXED_PREC_SCALE = 9;                  // = SQL_COLUMN_MONEY;
  SQL_DESC_LABEL = 18;                            // SQL_COLUMN_LABEL;
  SQL_DESC_LITERAL_PREFIX = 27;
  SQL_DESC_LITERAL_SUFFIX = 28;
  SQL_DESC_LOCAL_TYPE_NAME = 29;
  SQL_DESC_MAXIMUM_SCALE = 30;
  SQL_DESC_MINIMUM_SCALE = 31;
  SQL_DESC_NUM_PREC_RADIX = 32;
  SQL_DESC_PARAMETER_TYPE = 33;
  SQL_DESC_ROWS_PROCESSED_PTR = 34;
  // #if (ODBCVER >= 0x0350)
  SQL_DESC_ROWVER = 35;
  // #endif { ODBCVER >= 0x0350 }
  SQL_DESC_SCHEMA_NAME = 16;                      // = SQL_COLUMN_OWNER_NAME;
  SQL_DESC_SEARCHABLE = 13;                       // = SQL_COLUMN_SEARCHABLE;
  SQL_DESC_TYPE_NAME = 14;                        // = SQL_COLUMN_TYPE_NAME;
  SQL_DESC_TABLE_NAME = 15;                       // = SQL_COLUMN_TABLE_NAME;
  SQL_DESC_UNSIGNED = 8;                          // = SQL_COLUMN_UNSIGNED;
  SQL_DESC_UPDATABLE = 10;                        // = SQL_COLUMN_UPDATABLE;

  { defines for diagnostics fields }
  SQL_DIAG_CURSOR_ROW_COUNT = (-1249);
  SQL_DIAG_ROW_NUMBER = (-1248);
  SQL_DIAG_COLUMN_NUMBER = (-1247);

  { SQL extended datatypes }
  SQL_DATE = 9;
  SQL_INTERVAL = 10;
  SQL_TIME = 10;
  SQL_TIMESTAMP = 11;
  SQL_LONGVARCHAR = (-1);
  SQL_BINARY = (-2);
  SQL_VARBINARY = (-3);
  SQL_LONGVARBINARY = (-4);
  SQL_BIGINT = (-5);
  SQL_TINYINT = (-6);
  SQL_BIT = (-7);
  // #if (ODBCVER >= 0x0350)
  SQL_GUID = (-11);
  // #endif  { ODBCVER >= 0x0350 }

  { interval code }
  SQL_CODE_YEAR = 1;
  SQL_CODE_MONTH = 2;
  SQL_CODE_DAY = 3;
  SQL_CODE_HOUR = 4;
  SQL_CODE_MINUTE = 5;
  SQL_CODE_SECOND = 6;
  SQL_CODE_YEAR_TO_MONTH = 7;
  SQL_CODE_DAY_TO_HOUR = 8;
  SQL_CODE_DAY_TO_MINUTE = 9;
  SQL_CODE_DAY_TO_SECOND = 10;
  SQL_CODE_HOUR_TO_MINUTE = 11;
  SQL_CODE_HOUR_TO_SECOND = 12;
  SQL_CODE_MINUTE_TO_SECOND = 13;

  SQL_INTERVAL_YEAR = (100 + SQL_CODE_YEAR);
  SQL_INTERVAL_MONTH = (100 + SQL_CODE_MONTH);
  SQL_INTERVAL_DAY = (100 + SQL_CODE_DAY);
  SQL_INTERVAL_HOUR = (100 + SQL_CODE_HOUR);
  SQL_INTERVAL_MINUTE = (100 + SQL_CODE_MINUTE);
  SQL_INTERVAL_SECOND = (100 + SQL_CODE_SECOND);
  SQL_INTERVAL_YEAR_TO_MONTH = (100 + SQL_CODE_YEAR_TO_MONTH);
  SQL_INTERVAL_DAY_TO_HOUR = (100 + SQL_CODE_DAY_TO_HOUR);
  SQL_INTERVAL_DAY_TO_MINUTE = (100 + SQL_CODE_DAY_TO_MINUTE);
  SQL_INTERVAL_DAY_TO_SECOND = (100 + SQL_CODE_DAY_TO_SECOND);
  SQL_INTERVAL_HOUR_TO_MINUTE = (100 + SQL_CODE_HOUR_TO_MINUTE);
  SQL_INTERVAL_HOUR_TO_SECOND = (100 + SQL_CODE_HOUR_TO_SECOND);
  SQL_INTERVAL_MINUTE_TO_SECOND = (100 + SQL_CODE_MINUTE_TO_SECOND);

  //! replaced to odbcsqlucode
  //  SQL_UNICODE = SQL_WCHAR;
  //  SQL_UNICODE_VARCHAR = SQL_WVARCHAR;
  //  SQL_UNICODE_LONGVARCHAR = SQL_WLONGVARCHAR;
  //  SQL_UNICODE_CHAR = SQL_WCHAR;

    { C datatype to SQL datatype mapping }
  SQL_C_CHAR = SQL_CHAR;                          { CHAR, VARCHAR, DECIMAL, NUMERIC }
  SQL_C_LONG = SQL_INTEGER;                       { INTEGER }
  SQL_C_SHORT = SQL_SMALLINT;                     { SMALLINT }
  SQL_C_FLOAT = SQL_REAL;                         { REAL }
  SQL_C_DOUBLE = SQL_DOUBLE;                      { FLOAT, DOUBLE }
  SQL_C_NUMERIC = SQL_NUMERIC;
  SQL_C_DEFAULT = 99;

  SQL_SIGNED_OFFSET = (-20);
  SQL_UNSIGNED_OFFSET = (-22);

  { C datatype to SQL datatype mapping }
  SQL_C_DATE = SQL_DATE;
  SQL_C_TIME = SQL_TIME;
  SQL_C_TIMESTAMP = SQL_TIMESTAMP;
  SQL_C_TYPE_DATE = SQL_TYPE_DATE;
  SQL_C_TYPE_TIME = SQL_TYPE_TIME;
  SQL_C_TYPE_TIMESTAMP = SQL_TYPE_TIMESTAMP;
  SQL_C_INTERVAL_YEAR = SQL_INTERVAL_YEAR;
  SQL_C_INTERVAL_MONTH = SQL_INTERVAL_MONTH;
  SQL_C_INTERVAL_DAY = SQL_INTERVAL_DAY;
  SQL_C_INTERVAL_HOUR = SQL_INTERVAL_HOUR;
  SQL_C_INTERVAL_MINUTE = SQL_INTERVAL_MINUTE;
  SQL_C_INTERVAL_SECOND = SQL_INTERVAL_SECOND;
  SQL_C_INTERVAL_YEAR_TO_MONTH = SQL_INTERVAL_YEAR_TO_MONTH;
  SQL_C_INTERVAL_DAY_TO_HOUR = SQL_INTERVAL_DAY_TO_HOUR;
  SQL_C_INTERVAL_DAY_TO_MINUTE = SQL_INTERVAL_DAY_TO_MINUTE;
  SQL_C_INTERVAL_DAY_TO_SECOND = SQL_INTERVAL_DAY_TO_SECOND;
  SQL_C_INTERVAL_HOUR_TO_MINUTE = SQL_INTERVAL_HOUR_TO_MINUTE;
  SQL_C_INTERVAL_HOUR_TO_SECOND = SQL_INTERVAL_HOUR_TO_SECOND;
  SQL_C_INTERVAL_MINUTE_TO_SECOND = SQL_INTERVAL_MINUTE_TO_SECOND;
  SQL_C_BINARY = SQL_BINARY;
  SQL_C_BIT = SQL_BIT;
  SQL_C_SBIGINT = (SQL_BIGINT + SQL_SIGNED_OFFSET); { SIGNED BIGINT }
  SQL_C_UBIGINT = (SQL_BIGINT + SQL_UNSIGNED_OFFSET); { UNSIGNED BIGINT }
  SQL_C_TINYINT = SQL_TINYINT;
  SQL_C_SLONG = (SQL_C_LONG + SQL_SIGNED_OFFSET); { SIGNED INTEGER }
  SQL_C_SSHORT = (SQL_C_SHORT + SQL_SIGNED_OFFSET); { SIGNED SMALLINT }
  SQL_C_STINYINT = (SQL_TINYINT + SQL_SIGNED_OFFSET); { SIGNED TINYINT }
  SQL_C_ULONG = (SQL_C_LONG + SQL_UNSIGNED_OFFSET); { UNSIGNED INTEGER}
  SQL_C_USHORT = (SQL_C_SHORT + SQL_UNSIGNED_OFFSET); { UNSIGNED SMALLINT}
  SQL_C_UTINYINT = (SQL_TINYINT + SQL_UNSIGNED_OFFSET); { UNSIGNED TINYINT}
  SQL_C_BOOKMARK = SQL_C_ULONG;                   { BOOKMARK }

  //#if (ODBCVER >= 0x0350)
  SQL_C_GUID = SQL_GUID;
  //#endif  { ODBCVER >= 0x0350 }

  SQL_TYPE_NULL = 0;
  SQL_C_VARBOOKMARK = SQL_C_BINARY;

  { define for SQL_DIAG_ROW_NUMBER and SQL_DIAG_COLUMN_NUMBER }
  SQL_NO_ROW_NUMBER = (-1);
  SQL_NO_COLUMN_NUMBER = (-1);
  SQL_ROW_NUMBER_UNKNOWN = (-2);
  SQL_COLUMN_NUMBER_UNKNOWN = (-2);

  { SQLBindParameter extensions }
  SQL_DEFAULT_PARAM = (-5);
  SQL_IGNORE = (-6);
  SQL_COLUMN_IGNORE = SQL_IGNORE;

  SQL_LEN_DATA_AT_EXEC_OFFSET = (-100);
function SQL_LEN_DATA_AT_EXEC(length: Integer): Integer;

const
  { binary length for driver specific attributes }
  SQL_LEN_BINARY_ATTR_OFFSET = (-100);
function SQL_LEN_BINARY_ATTR(length: Integer): Integer;

const
  { Defines used by Driver Manager when mapping SQLSetParam to SQLBindParameter }
  SQL_PARAM_TYPE_DEFAULT = 2;                     // SQL_PARAM_INPUT_OUTPUT;
  SQL_SETPARAM_VALUE_MAX = LongInt(-1);

  { SQLColAttributes defines }
  SQL_COLUMN_COUNT = 0;
  SQL_COLUMN_NAME = 1;
  SQL_COLUMN_TYPE = 2;
  SQL_COLUMN_LENGTH = 3;
  SQL_COLUMN_PRECISION = 4;
  SQL_COLUMN_SCALE = 5;
  SQL_COLUMN_DISPLAY_SIZE = 6;
  SQL_COLUMN_NULLABLE = 7;
  SQL_COLUMN_UNSIGNED = 8;
  SQL_COLUMN_MONEY = 9;
  SQL_COLUMN_UPDATABLE = 10;
  SQL_COLUMN_AUTO_INCREMENT = 11;
  SQL_COLUMN_CASE_SENSITIVE = 12;
  SQL_COLUMN_SEARCHABLE = 13;
  SQL_COLUMN_TYPE_NAME = 14;
  SQL_COLUMN_TABLE_NAME = 15;
  SQL_COLUMN_OWNER_NAME = 16;
  SQL_COLUMN_QUALIFIER_NAME = 17;
  SQL_COLUMN_LABEL = 18;
  SQL_COLATT_OPT_MAX = SQL_COLUMN_LABEL;
  SQL_COLATT_OPT_MIN = SQL_COLUMN_COUNT;

  { SQLColAttributes subdefines for SQL_COLUMN_UPDATABLE }
  SQL_ATTR_READONLY = 0;
  SQL_ATTR_WRITE = 1;
  SQL_ATTR_READWRITE_UNKNOWN = 2;

  { SQLColAttributes subdefines for SQL_COLUMN_SEARCHABLE }
  { These are also used by SQLGetInfo                     }
  SQL_UNSEARCHABLE = 0;
  SQL_LIKE_ONLY = 1;
  SQL_ALL_EXCEPT_LIKE = 2;
  SQL_SEARCHABLE = 3;
  SQL_PRED_SEARCHABLE = SQL_SEARCHABLE;

  { Special return values for SQLGetData }
  SQL_NO_TOTAL = (-4);

  {******************************************}
  { SQLGetFunctions: additional values for   }
  { fFunction to represent functions that    }
  { are not in the X/Open spec.		   }
  {******************************************}
  SQL_API_SQLALLOCHANDLESTD = 73;
  SQL_API_SQLBULKOPERATIONS = 24;
  SQL_API_SQLBINDPARAMETER = 72;
  SQL_API_SQLBROWSECONNECT = 55;
  SQL_API_SQLCOLATTRIBUTES = 6;
  SQL_API_SQLCOLUMNPRIVILEGES = 56;
  SQL_API_SQLDESCRIBEPARAM = 58;
  SQL_API_SQLDRIVERCONNECT = 41;
  SQL_API_SQLDRIVERS = 71;
  SQL_API_SQLEXTENDEDFETCH = 59;
  SQL_API_SQLFOREIGNKEYS = 60;
  SQL_API_SQLMORERESULTS = 61;
  SQL_API_SQLNATIVESQL = 62;
  SQL_API_SQLNUMPARAMS = 63;
  SQL_API_SQLPARAMOPTIONS = 64;
  SQL_API_SQLPRIMARYKEYS = 65;
  SQL_API_SQLPROCEDURECOLUMNS = 66;
  SQL_API_SQLPROCEDURES = 67;
  SQL_API_SQLSETPOS = 68;
  SQL_API_SQLSETSCROLLOPTIONS = 69;
  SQL_API_SQLTABLEPRIVILEGES = 70;

  {--------------------------------------------}
  { SQL_API_ALL_FUNCTIONS returns an array     }
  { of 'booleans' representing whether a       }
  { function is implemented by the driver.     }
  {                                            }
  { CAUTION: Only functions defined in ODBC    }
  { version 2.0 and earlier are returned, the  }
  { new high-range function numbers defined by }
  { X/Open break this scheme.   See the new    }
  { method -- SQL_API_ODBC3_ALL_FUNCTIONS      }
  {--------------------------------------------}
  SQL_API_ALL_FUNCTIONS = 0;                      { See CAUTION above }

  {----------------------------------------------}
  { 2.X drivers export a dummy function with  	}
  { ordinal number SQL_API_LOADBYORDINAL to speed}
  { loading under the windows operating system.  }
  { 						}
  { CAUTION: Loading by ordinal is not supported }
  { for 3.0 and above drivers.			}
  {----------------------------------------------}
  SQL_API_LOADBYORDINAL = 199;                    { See CAUTION above }

  {----------------------------------------------}
  { SQL_API_ODBC3_ALL_FUNCTIONS                  }
  { This returns a bitmap, which allows us to    }
  { handle the higher-valued function numbers.   }
  { Use  SQL_FUNC_EXISTS(bitmap,function_number) }
  { to determine if the function exists.         }
  {----------------------------------------------}
  SQL_API_ODBC3_ALL_FUNCTIONS = 999;
  SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250;         { array of 250 words }

  //!!! function SQL_FUNC_EXISTS(pfExists, uwAPI)   (( *(((UWORD* ) (pfExists)) + ((uwAPI) >> 4)) & (1 << ((uwAPI) & 0x000F))) ? SQL_TRUE : SQL_FALSE)


const
  {**********************************************}
  { Extended definitions for SQLGetInfo	       }
  {**********************************************}

  {---------------------------------}
  { Values in ODBC 2.0 that are not }
  { in the X/Open spec              }
  {---------------------------------}

  SQL_INFO_FIRST = 0;
  SQL_ACTIVE_CONNECTIONS = 0;                     { MAX_DRIVER_CONNECTIONS }
  SQL_ACTIVE_STATEMENTS = 1;                      { MAX_CONCURRENT_ACTIVITIES }
  SQL_DRIVER_HDBC = 3;
  SQL_DRIVER_HENV = 4;
  SQL_DRIVER_HSTMT = 5;
  SQL_DRIVER_NAME = 6;
  SQL_DRIVER_VER = 7;
  SQL_ODBC_API_CONFORMANCE = 9;
  SQL_ODBC_VER = 10;
  SQL_ROW_UPDATES = 11;
  SQL_ODBC_SAG_CLI_CONFORMANCE = 12;
  SQL_ODBC_SQL_CONFORMANCE = 15;
  SQL_PROCEDURES = 21;
  SQL_CONCAT_NULL_BEHAVIOR = 22;
  SQL_CURSOR_ROLLBACK_BEHAVIOR = 24;
  SQL_EXPRESSIONS_IN_ORDERBY = 27;
  SQL_MAX_OWNER_NAME_LEN = 32;                    { MAX_SCHEMA_NAME_LEN }
  SQL_MAX_PROCEDURE_NAME_LEN = 33;
  SQL_MAX_QUALIFIER_NAME_LEN = 34;                { MAX_CATALOG_NAME_LEN }
  SQL_MULT_RESULT_SETS = 36;
  SQL_MULTIPLE_ACTIVE_TXN = 37;
  SQL_OUTER_JOINS = 38;
  SQL_OWNER_TERM = 39;
  SQL_PROCEDURE_TERM = 40;
  SQL_QUALIFIER_NAME_SEPARATOR = 41;
  SQL_QUALIFIER_TERM = 42;
  SQL_SCROLL_OPTIONS = 44;
  SQL_TABLE_TERM = 45;
  SQL_CONVERT_FUNCTIONS = 48;
  SQL_NUMERIC_FUNCTIONS = 49;
  SQL_STRING_FUNCTIONS = 50;
  SQL_SYSTEM_FUNCTIONS = 51;
  SQL_TIMEDATE_FUNCTIONS = 52;
  SQL_CONVERT_BIGINT = 53;
  SQL_CONVERT_BINARY = 54;
  SQL_CONVERT_BIT = 55;
  SQL_CONVERT_CHAR = 56;
  SQL_CONVERT_DATE = 57;
  SQL_CONVERT_DECIMAL = 58;
  SQL_CONVERT_DOUBLE = 59;
  SQL_CONVERT_FLOAT = 60;
  SQL_CONVERT_INTEGER = 61;
  SQL_CONVERT_LONGVARCHAR = 62;
  SQL_CONVERT_NUMERIC = 63;
  SQL_CONVERT_REAL = 64;
  SQL_CONVERT_SMALLINT = 65;
  SQL_CONVERT_TIME = 66;
  SQL_CONVERT_TIMESTAMP = 67;
  SQL_CONVERT_TINYINT = 68;
  SQL_CONVERT_VARBINARY = 69;
  SQL_CONVERT_VARCHAR = 70;
  SQL_CONVERT_LONGVARBINARY = 71;
  SQL_ODBC_SQL_OPT_IEF = 73;                      { SQL_INTEGRITY }
  SQL_CORRELATION_NAME = 74;
  SQL_NON_NULLABLE_COLUMNS = 75;
  SQL_DRIVER_HLIB = 76;
  SQL_DRIVER_ODBC_VER = 77;
  SQL_LOCK_TYPES = 78;
  SQL_POS_OPERATIONS = 79;
  SQL_POSITIONED_STATEMENTS = 80;
  SQL_BOOKMARK_PERSISTENCE = 82;
  SQL_STATIC_SENSITIVITY = 83;
  SQL_FILE_USAGE = 84;
  SQL_COLUMN_ALIAS = 87;
  SQL_GROUP_BY = 88;
  SQL_KEYWORDS = 89;
  SQL_OWNER_USAGE = 91;
  SQL_QUALIFIER_USAGE = 92;
  SQL_QUOTED_IDENTIFIER_CASE = 93;
  SQL_SUBQUERIES = 95;
  SQL_UNION = 96;
  SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103;
  SQL_MAX_CHAR_LITERAL_LEN = 108;
  SQL_TIMEDATE_ADD_INTERVALS = 109;
  SQL_TIMEDATE_DIFF_INTERVALS = 110;
  SQL_NEED_LONG_DATA_LEN = 111;
  SQL_MAX_BINARY_LITERAL_LEN = 112;
  SQL_LIKE_ESCAPE_CLAUSE = 113;
  SQL_QUALIFIER_LOCATION = 114;


  {-----------------------------------------------}
  { ODBC 3.0 SQLGetInfo values that are not part  }
  { of the X/Open standard at this time.   X/Open }
  { standard values are in sql.h.				 }
  {-----------------------------------------------}
  SQL_ACTIVE_ENVIRONMENTS = 116;
  SQL_ALTER_DOMAIN = 117;

  SQL_SQL_CONFORMANCE = 118;
  SQL_DATETIME_LITERALS = 119;

  SQL_ASYNC_MODE = 10021;                         { new X/Open spec }
  SQL_BATCH_ROW_COUNT = 120;
  SQL_BATCH_SUPPORT = 121;
  SQL_CATALOG_LOCATION = SQL_QUALIFIER_LOCATION;
  SQL_CATALOG_NAME_SEPARATOR = SQL_QUALIFIER_NAME_SEPARATOR;
  SQL_CATALOG_TERM = SQL_QUALIFIER_TERM;
  SQL_CATALOG_USAGE = SQL_QUALIFIER_USAGE;
  SQL_CONVERT_WCHAR = 122;
  SQL_CONVERT_INTERVAL_DAY_TIME = 123;
  SQL_CONVERT_INTERVAL_YEAR_MONTH = 124;
  SQL_CONVERT_WLONGVARCHAR = 125;
  SQL_CONVERT_WVARCHAR = 126;
  SQL_CREATE_ASSERTION = 127;
  SQL_CREATE_CHARACTER_SET = 128;
  SQL_CREATE_COLLATION = 129;
  SQL_CREATE_DOMAIN = 130;
  SQL_CREATE_SCHEMA = 131;
  SQL_CREATE_TABLE = 132;
  SQL_CREATE_TRANSLATION = 133;
  SQL_CREATE_VIEW = 134;
  SQL_DRIVER_HDESC = 135;
  SQL_DROP_ASSERTION = 136;
  SQL_DROP_CHARACTER_SET = 137;
  SQL_DROP_COLLATION = 138;
  SQL_DROP_DOMAIN = 139;
  SQL_DROP_SCHEMA = 140;
  SQL_DROP_TABLE = 141;
  SQL_DROP_TRANSLATION = 142;
  SQL_DROP_VIEW = 143;
  SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144;
  SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145;
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146;
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147;
  SQL_INDEX_KEYWORDS = 148;
  SQL_INFO_SCHEMA_VIEWS = 149;
  SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150;
  SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151;
  SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022;    { new X/Open spec }
  SQL_ODBC_INTERFACE_CONFORMANCE = 152;
  SQL_PARAM_ARRAY_ROW_COUNTS = 153;
  SQL_PARAM_ARRAY_SELECTS = 154;
  SQL_SCHEMA_TERM = SQL_OWNER_TERM;
  SQL_SCHEMA_USAGE = SQL_OWNER_USAGE;
  SQL_SQL92_DATETIME_FUNCTIONS = 155;
  SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156;
  SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157;
  SQL_SQL92_GRANT = 158;
  SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159;
  SQL_SQL92_PREDICATES = 160;
  SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161;
  SQL_SQL92_REVOKE = 162;
  SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163;
  SQL_SQL92_STRING_FUNCTIONS = 164;
  SQL_SQL92_VALUE_EXPRESSIONS = 165;
  SQL_STANDARD_CLI_CONFORMANCE = 166;
  SQL_STATIC_CURSOR_ATTRIBUTES1 = 167;
  SQL_STATIC_CURSOR_ATTRIBUTES2 = 168;

  SQL_AGGREGATE_FUNCTIONS = 169;
  SQL_DDL_INDEX = 170;
  SQL_DM_VER = 171;
  SQL_INSERT_STATEMENT = 172;
  SQL_UNION_STATEMENT = SQL_UNION;

  SQL_DTC_TRANSITION_COST = 1750;


  { SQL_ALTER_TABLE bitmasks }
  // the following 5 bitmasks are defined in sql.h
  // #define SQL_AT_ADD_COLUMN                   	0x00000001L
  // #define SQL_AT_DROP_COLUMN                  	0x00000002L
  // #define SQL_AT_ADD_CONSTRAINT               	0x00000008L
  SQL_AT_ADD_COLUMN_SINGLE = LongInt($00000020);
  SQL_AT_ADD_COLUMN_DEFAULT = LongInt($00000040);
  SQL_AT_ADD_COLUMN_COLLATION = LongInt($00000080);
  SQL_AT_SET_COLUMN_DEFAULT = LongInt($00000100);
  SQL_AT_DROP_COLUMN_DEFAULT = LongInt($00000200);
  SQL_AT_DROP_COLUMN_CASCADE = LongInt($00000400);
  SQL_AT_DROP_COLUMN_RESTRICT = LongInt($00000800);
  SQL_AT_ADD_TABLE_CONSTRAINT = LongInt($00001000);
  SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = LongInt($00002000);
  SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = LongInt($00004000);
  SQL_AT_CONSTRAINT_NAME_DEFINITION = LongInt($00008000);
  SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = LongInt($00010000);
  SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = LongInt($00020000);
  SQL_AT_CONSTRAINT_DEFERRABLE = LongInt($00040000);
  SQL_AT_CONSTRAINT_NON_DEFERRABLE = LongInt($00080000);

  { SQL_CONVERT_*  return value bitmasks }
  SQL_CVT_CHAR = LongInt($00000001);
  SQL_CVT_NUMERIC = LongInt($00000002);
  SQL_CVT_DECIMAL = LongInt($00000004);
  SQL_CVT_INTEGER = LongInt($00000008);
  SQL_CVT_SMALLINT = LongInt($00000010);
  SQL_CVT_FLOAT = LongInt($00000020);
  SQL_CVT_REAL = LongInt($00000040);
  SQL_CVT_DOUBLE = LongInt($00000080);
  SQL_CVT_VARCHAR = LongInt($00000100);
  SQL_CVT_LONGVARCHAR = LongInt($00000200);
  SQL_CVT_BINARY = LongInt($00000400);
  SQL_CVT_VARBINARY = LongInt($00000800);
  SQL_CVT_BIT = LongInt($00001000);
  SQL_CVT_TINYINT = LongInt($00002000);
  SQL_CVT_BIGINT = LongInt($00004000);
  SQL_CVT_DATE = LongInt($00008000);
  SQL_CVT_TIME = LongInt($00010000);
  SQL_CVT_TIMESTAMP = LongInt($00020000);
  SQL_CVT_LONGVARBINARY = LongInt($00040000);
  SQL_CVT_INTERVAL_YEAR_MONTH = LongInt($00080000);
  SQL_CVT_INTERVAL_DAY_TIME = LongInt($00100000);
  SQL_CVT_WCHAR = LongInt($00200000);
  SQL_CVT_WLONGVARCHAR = LongInt($00400000);
  SQL_CVT_WVARCHAR = LongInt($00800000);

  { SQL_CONVERT_FUNCTIONS functions }
  SQL_FN_CVT_CONVERT = LongInt($00000001);
  SQL_FN_CVT_CAST = LongInt($00000002);

  { SQL_STRING_FUNCTIONS functions }
  SQL_FN_STR_CONCAT = LongInt($00000001);
  SQL_FN_STR_INSERT = LongInt($00000002);
  SQL_FN_STR_LEFT = LongInt($00000004);
  SQL_FN_STR_LTRIM = LongInt($00000008);
  SQL_FN_STR_LENGTH = LongInt($00000010);
  SQL_FN_STR_LOCATE = LongInt($00000020);
  SQL_FN_STR_LCASE = LongInt($00000040);
  SQL_FN_STR_REPEAT = LongInt($00000080);
  SQL_FN_STR_REPLACE = LongInt($00000100);
  SQL_FN_STR_RIGHT = LongInt($00000200);
  SQL_FN_STR_RTRIM = LongInt($00000400);
  SQL_FN_STR_SUBSTRING = LongInt($00000800);
  SQL_FN_STR_UCASE = LongInt($00001000);
  SQL_FN_STR_ASCII = LongInt($00002000);
  SQL_FN_STR_CHAR = LongInt($00004000);
  SQL_FN_STR_DIFFERENCE = LongInt($00008000);
  SQL_FN_STR_LOCATE_2 = LongInt($00010000);
  SQL_FN_STR_SOUNDEX = LongInt($00020000);
  SQL_FN_STR_SPACE = LongInt($00040000);
  SQL_FN_STR_BIT_LENGTH = LongInt($00080000);
  SQL_FN_STR_CHAR_LENGTH = LongInt($00100000);
  SQL_FN_STR_CHARACTER_LENGTH = LongInt($00200000);
  SQL_FN_STR_OCTET_LENGTH = LongInt($00400000);
  SQL_FN_STR_POSITION = LongInt($00800000);

  { SQL_SQL92_STRING_FUNCTIONS }
  SQL_SSF_CONVERT = LongInt($00000001);
  SQL_SSF_LOWER = LongInt($00000002);
  SQL_SSF_UPPER = LongInt($00000004);
  SQL_SSF_SUBSTRING = LongInt($00000008);
  SQL_SSF_TRANSLATE = LongInt($00000010);
  SQL_SSF_TRIM_BOTH = LongInt($00000020);
  SQL_SSF_TRIM_LEADING = LongInt($00000040);
  SQL_SSF_TRIM_TRAILING = LongInt($00000080);

  { SQL_NUMERIC_FUNCTIONS functions }
  SQL_FN_NUM_ABS = LongInt($00000001);
  SQL_FN_NUM_ACOS = LongInt($00000002);
  SQL_FN_NUM_ASIN = LongInt($00000004);
  SQL_FN_NUM_ATAN = LongInt($00000008);
  SQL_FN_NUM_ATAN2 = LongInt($00000010);
  SQL_FN_NUM_CEILING = LongInt($00000020);
  SQL_FN_NUM_COS = LongInt($00000040);
  SQL_FN_NUM_COT = LongInt($00000080);
  SQL_FN_NUM_EXP = LongInt($00000100);
  SQL_FN_NUM_FLOOR = LongInt($00000200);
  SQL_FN_NUM_LOG = LongInt($00000400);
  SQL_FN_NUM_MOD = LongInt($00000800);
  SQL_FN_NUM_SIGN = LongInt($00001000);
  SQL_FN_NUM_SIN = LongInt($00002000);
  SQL_FN_NUM_SQRT = LongInt($00004000);
  SQL_FN_NUM_TAN = LongInt($00008000);
  SQL_FN_NUM_PI = LongInt($00010000);
  SQL_FN_NUM_RAND = LongInt($00020000);
  SQL_FN_NUM_DEGREES = LongInt($00040000);
  SQL_FN_NUM_LOG10 = LongInt($00080000);
  SQL_FN_NUM_POWER = LongInt($00100000);
  SQL_FN_NUM_RADIANS = LongInt($00200000);
  SQL_FN_NUM_ROUND = LongInt($00400000);
  SQL_FN_NUM_TRUNCATE = LongInt($00800000);

  { SQL_SQL92_NUMERIC_VALUE_FUNCTIONS }
  SQL_SNVF_BIT_LENGTH = LongInt($00000001);
  SQL_SNVF_CHAR_LENGTH = LongInt($00000002);
  SQL_SNVF_CHARACTER_LENGTH = LongInt($00000004);
  SQL_SNVF_EXTRACT = LongInt($00000008);
  SQL_SNVF_OCTET_LENGTH = LongInt($00000010);
  SQL_SNVF_POSITION = LongInt($00000020);

  { SQL_TIMEDATE_FUNCTIONS functions }
  SQL_FN_TD_NOW = LongInt($00000001);
  SQL_FN_TD_CURDATE = LongInt($00000002);
  SQL_FN_TD_DAYOFMONTH = LongInt($00000004);
  SQL_FN_TD_DAYOFWEEK = LongInt($00000008);
  SQL_FN_TD_DAYOFYEAR = LongInt($00000010);
  SQL_FN_TD_MONTH = LongInt($00000020);
  SQL_FN_TD_QUARTER = LongInt($00000040);
  SQL_FN_TD_WEEK = LongInt($00000080);
  SQL_FN_TD_YEAR = LongInt($00000100);
  SQL_FN_TD_CURTIME = LongInt($00000200);
  SQL_FN_TD_HOUR = LongInt($00000400);
  SQL_FN_TD_MINUTE = LongInt($00000800);
  SQL_FN_TD_SECOND = LongInt($00001000);
  SQL_FN_TD_TIMESTAMPADD = LongInt($00002000);
  SQL_FN_TD_TIMESTAMPDIFF = LongInt($00004000);
  SQL_FN_TD_DAYNAME = LongInt($00008000);
  SQL_FN_TD_MONTHNAME = LongInt($00010000);
  SQL_FN_TD_CURRENT_DATE = LongInt($00020000);
  SQL_FN_TD_CURRENT_TIME = LongInt($00040000);
  SQL_FN_TD_CURRENT_TIMESTAMP = LongInt($00080000);
  SQL_FN_TD_EXTRACT = LongInt($00100000);

  { SQL_SQL92_DATETIME_FUNCTIONS }
  SQL_SDF_CURRENT_DATE = LongInt($00000001);
  SQL_SDF_CURRENT_TIME = LongInt($00000002);
  SQL_SDF_CURRENT_TIMESTAMP = LongInt($00000004);

  { SQL_SYSTEM_FUNCTIONS functions }
  SQL_FN_SYS_USERNAME = LongInt($00000001);
  SQL_FN_SYS_DBNAME = LongInt($00000002);
  SQL_FN_SYS_IFNULL = LongInt($00000004);

  { SQL_TIMEDATE_ADD_INTERVALS and SQL_TIMEDATE_DIFF_INTERVALS functions }
  SQL_FN_TSI_FRAC_SECOND = LongInt($00000001);
  SQL_FN_TSI_SECOND = LongInt($00000002);
  SQL_FN_TSI_MINUTE = LongInt($00000004);
  SQL_FN_TSI_HOUR = LongInt($00000008);
  SQL_FN_TSI_DAY = LongInt($00000010);
  SQL_FN_TSI_WEEK = LongInt($00000020);
  SQL_FN_TSI_MONTH = LongInt($00000040);
  SQL_FN_TSI_QUARTER = LongInt($00000080);
  SQL_FN_TSI_YEAR = LongInt($00000100);


  { Bitmasks for SQL_DYNAMIC_CURSOR_ATTRIBUTES1,
    SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1,
    SQL_KEYSET_CURSOR_ATTRIBUTES1, and SQL_STATIC_CURSOR_ATTRIBUTES1
  }
  { supported SQLFetchScroll FetchOrientation's }
  SQL_CA1_NEXT = LongInt($00000001);
  SQL_CA1_ABSOLUTE = LongInt($00000002);
  SQL_CA1_RELATIVE = LongInt($00000004);
  SQL_CA1_BOOKMARK = LongInt($00000008);

  { supported SQLSetPos LockType's }
  SQL_CA1_LOCK_NO_CHANGE = LongInt($00000040);
  SQL_CA1_LOCK_EXCLUSIVE = LongInt($00000080);
  SQL_CA1_LOCK_UNLOCK = LongInt($00000100);

  { supported SQLSetPos Operations }
  SQL_CA1_POS_POSITION = LongInt($00000200);
  SQL_CA1_POS_UPDATE = LongInt($00000400);
  SQL_CA1_POS_DELETE = LongInt($00000800);
  SQL_CA1_POS_REFRESH = LongInt($00001000);

  { positioned updates and deletes }
  SQL_CA1_POSITIONED_UPDATE = LongInt($00002000);
  SQL_CA1_POSITIONED_DELETE = LongInt($00004000);
  SQL_CA1_SELECT_FOR_UPDATE = LongInt($00008000);

  { supported SQLBulkOperations operations }
  SQL_CA1_BULK_ADD = LongInt($00010000);
  SQL_CA1_BULK_UPDATE_BY_BOOKMARK = LongInt($00020000);
  SQL_CA1_BULK_DELETE_BY_BOOKMARK = LongInt($00040000);
  SQL_CA1_BULK_FETCH_BY_BOOKMARK = LongInt($00080000);


  { Bitmasks for SQL_DYNAMIC_CURSOR_ATTRIBUTES2,
    SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2,
    SQL_KEYSET_CURSOR_ATTRIBUTES2, and SQL_STATIC_CURSOR_ATTRIBUTES2
  }
  { supported values for SQL_ATTR_SCROLL_CONCURRENCY }
  SQL_CA2_READ_ONLY_CONCURRENCY = LongInt($00000001);
  SQL_CA2_LOCK_CONCURRENCY = LongInt($00000002);
  SQL_CA2_OPT_ROWVER_CONCURRENCY = LongInt($00000004);
  SQL_CA2_OPT_VALUES_CONCURRENCY = LongInt($00000008);

  { sensitivity of the cursor to its own inserts, deletes, and updates }
  SQL_CA2_SENSITIVITY_ADDITIONS = LongInt($00000010);
  SQL_CA2_SENSITIVITY_DELETIONS = LongInt($00000020);
  SQL_CA2_SENSITIVITY_UPDATES = LongInt($00000040);

  { semantics of SQL_ATTR_MAX_ROWS }
  SQL_CA2_MAX_ROWS_SELECT = LongInt($00000080);
  SQL_CA2_MAX_ROWS_INSERT = LongInt($00000100);
  SQL_CA2_MAX_ROWS_DELETE = LongInt($00000200);
  SQL_CA2_MAX_ROWS_UPDATE = LongInt($00000400);
  SQL_CA2_MAX_ROWS_CATALOG = LongInt($00000800);
  SQL_CA2_MAX_ROWS_AFFECTS_ALL = (SQL_CA2_MAX_ROWS_SELECT or SQL_CA2_MAX_ROWS_INSERT or SQL_CA2_MAX_ROWS_DELETE or SQL_CA2_MAX_ROWS_UPDATE or SQL_CA2_MAX_ROWS_CATALOG);

  { semantics of SQL_DIAG_CURSOR_ROW_COUNT }
  SQL_CA2_CRC_EXACT = LongInt($00001000);
  SQL_CA2_CRC_APPROXIMATE = LongInt($00002000);

  { the kinds of positioned statements that can be simulated }
  SQL_CA2_SIMULATE_NON_UNIQUE = LongInt($00004000);
  SQL_CA2_SIMULATE_TRY_UNIQUE = LongInt($00008000);
  SQL_CA2_SIMULATE_UNIQUE = LongInt($00010000);

  { SQL_ODBC_API_CONFORMANCE values }
  SQL_OAC_NONE = $0000;
  SQL_OAC_LEVEL1 = $0001;
  SQL_OAC_LEVEL2 = $0002;

  { SQL_ODBC_SAG_CLI_CONFORMANCE values }
  SQL_OSCC_NOT_COMPLIANT = $0000;
  SQL_OSCC_COMPLIANT = $0001;

  { SQL_ODBC_SQL_CONFORMANCE values }
  SQL_OSC_MINIMUM = $0000;
  SQL_OSC_CORE = $0001;
  SQL_OSC_EXTENDED = $0002;

  { SQL_CONCAT_NULL_BEHAVIOR values }
  SQL_CB_NULL = $0000;
  SQL_CB_NON_NULL = $0001;

  { SQL_SCROLL_OPTIONS masks }
  SQL_SO_FORWARD_ONLY = LongInt($00000001);
  SQL_SO_KEYSET_DRIVEN = LongInt($00000002);
  SQL_SO_DYNAMIC = LongInt($00000004);
  SQL_SO_MIXED = LongInt($00000008);
  SQL_SO_STATIC = LongInt($00000010);


  { SQL_FETCH_DIRECTION masks }

  { SQL_FETCH_RESUME is no longer supported
    #define SQL_FD_FETCH_RESUME                 0x00000040L
  }
  SQL_FD_FETCH_BOOKMARK = LongInt($00000080);

  { SQL_TXN_ISOLATION_OPTION masks }
  { SQL_TXN_VERSIONING is no longer supported
    #define SQL_TXN_VERSIONING                  0x00000010L
  }

  { SQL_CORRELATION_NAME values }
  SQL_CN_NONE = $0000;
  SQL_CN_DIFFERENT = $0001;
  SQL_CN_ANY = $0002;

  { SQL_NON_NULLABLE_COLUMNS values }
  SQL_NNC_NULL = $0000;
  SQL_NNC_NON_NULL = $0001;

  { SQL_NULL_COLLATION values }
  SQL_NC_START = $0002;
  SQL_NC_END = $0004;

  { SQL_FILE_USAGE values }
  SQL_FILE_NOT_SUPPORTED = $0000;
  SQL_FILE_TABLE = $0001;
  SQL_FILE_QUALIFIER = $0002;
  SQL_FILE_CATALOG = SQL_FILE_QUALIFIER;          // ODBC 3.0

  { SQL_GETDATA_EXTENSIONS values }
  SQL_GD_BLOCK = LongInt($00000004);
  SQL_GD_BOUND = LongInt($00000008);

  { SQL_POSITIONED_STATEMENTS masks }
  SQL_PS_POSITIONED_DELETE = LongInt($00000001);
  SQL_PS_POSITIONED_UPDATE = LongInt($00000002);
  SQL_PS_SELECT_FOR_UPDATE = LongInt($00000004);

  { SQL_GROUP_BY values }
  SQL_GB_NOT_SUPPORTED = $0000;
  SQL_GB_GROUP_BY_EQUALS_SELECT = $0001;
  SQL_GB_GROUP_BY_CONTAINS_SELECT = $0002;
  SQL_GB_NO_RELATION = $0003;
  SQL_GB_COLLATE = $0004;

  { SQL_OWNER_USAGE masks }
  SQL_OU_DML_STATEMENTS = LongInt($00000001);
  SQL_OU_PROCEDURE_INVOCATION = LongInt($00000002);
  SQL_OU_TABLE_DEFINITION = LongInt($00000004);
  SQL_OU_INDEX_DEFINITION = LongInt($00000008);
  SQL_OU_PRIVILEGE_DEFINITION = LongInt($00000010);

  { SQL_SCHEMA_USAGE masks }
  SQL_SU_DML_STATEMENTS = SQL_OU_DML_STATEMENTS;
  SQL_SU_PROCEDURE_INVOCATION = SQL_OU_PROCEDURE_INVOCATION;
  SQL_SU_TABLE_DEFINITION = SQL_OU_TABLE_DEFINITION;
  SQL_SU_INDEX_DEFINITION = SQL_OU_INDEX_DEFINITION;
  SQL_SU_PRIVILEGE_DEFINITION = SQL_OU_PRIVILEGE_DEFINITION;

  { SQL_QUALIFIER_USAGE masks }
  SQL_QU_DML_STATEMENTS = LongInt($00000001);
  SQL_QU_PROCEDURE_INVOCATION = LongInt($00000002);
  SQL_QU_TABLE_DEFINITION = LongInt($00000004);
  SQL_QU_INDEX_DEFINITION = LongInt($00000008);
  SQL_QU_PRIVILEGE_DEFINITION = LongInt($00000010);

  { SQL_CATALOG_USAGE masks }
  SQL_CU_DML_STATEMENTS = SQL_QU_DML_STATEMENTS;
  SQL_CU_PROCEDURE_INVOCATION = SQL_QU_PROCEDURE_INVOCATION;
  SQL_CU_TABLE_DEFINITION = SQL_QU_TABLE_DEFINITION;
  SQL_CU_INDEX_DEFINITION = SQL_QU_INDEX_DEFINITION;
  SQL_CU_PRIVILEGE_DEFINITION = SQL_QU_PRIVILEGE_DEFINITION;

  { SQL_SUBQUERIES masks }
  SQL_SQ_COMPARISON = LongInt($00000001);
  SQL_SQ_EXISTS = LongInt($00000002);
  SQL_SQ_IN = LongInt($00000004);
  SQL_SQ_QUANTIFIED = LongInt($00000008);
  SQL_SQ_CORRELATED_SUBQUERIES = LongInt($00000010);

  { SQL_UNION masks }
  SQL_U_UNION = LongInt($00000001);
  SQL_U_UNION_ALL = LongInt($00000002);

  { SQL_BOOKMARK_PERSISTENCE values }
  SQL_BP_CLOSE = LongInt($00000001);
  SQL_BP_DELETE = LongInt($00000002);
  SQL_BP_DROP = LongInt($00000004);
  SQL_BP_TRANSACTION = LongInt($00000008);
  SQL_BP_UPDATE = LongInt($00000010);
  SQL_BP_OTHER_HSTMT = LongInt($00000020);
  SQL_BP_SCROLL = LongInt($00000040);

  { SQL_STATIC_SENSITIVITY values }
  SQL_SS_ADDITIONS = LongInt($00000001);
  SQL_SS_DELETIONS = LongInt($00000002);
  SQL_SS_UPDATES = LongInt($00000004);

  { SQL_VIEW values }
  SQL_CV_CREATE_VIEW = LongInt($00000001);
  SQL_CV_CHECK_OPTION = LongInt($00000002);
  SQL_CV_CASCADED = LongInt($00000004);
  SQL_CV_LOCAL = LongInt($00000008);

  { SQL_LOCK_TYPES masks }
  SQL_LCK_NO_CHANGE = LongInt($00000001);
  SQL_LCK_EXCLUSIVE = LongInt($00000002);
  SQL_LCK_UNLOCK = LongInt($00000004);

  { SQL_POS_OPERATIONS masks }
  SQL_POS_POSITION = LongInt($00000001);
  SQL_POS_REFRESH = LongInt($00000002);
  SQL_POS_UPDATE = LongInt($00000004);
  SQL_POS_DELETE = LongInt($00000008);
  SQL_POS_ADD = LongInt($00000010);

  { SQL_QUALIFIER_LOCATION values }
  SQL_QL_START = $0001;
  SQL_QL_END = $0002;


  { Here start return values for ODBC 3.0 SQLGetInfo }

  { SQL_AGGREGATE_FUNCTIONS bitmasks }
  SQL_AF_AVG = LongInt($00000001);
  SQL_AF_COUNT = LongInt($00000002);
  SQL_AF_MAX = LongInt($00000004);
  SQL_AF_MIN = LongInt($00000008);
  SQL_AF_SUM = LongInt($00000010);
  SQL_AF_DISTINCT = LongInt($00000020);
  SQL_AF_ALL = LongInt($00000040);

  { SQL_SQL_CONFORMANCE bit masks }
  SQL_SC_SQL92_ENTRY = LongInt($00000001);
  SQL_SC_FIPS127_2_TRANSITIONAL = LongInt($00000002);
  SQL_SC_SQL92_INTERMEDIATE = LongInt($00000004);
  SQL_SC_SQL92_FULL = LongInt($00000008);

  { SQL_DATETIME_LITERALS masks }
  SQL_DL_SQL92_DATE = LongInt($00000001);
  SQL_DL_SQL92_TIME = LongInt($00000002);
  SQL_DL_SQL92_TIMESTAMP = LongInt($00000004);
  SQL_DL_SQL92_INTERVAL_YEAR = LongInt($00000008);
  SQL_DL_SQL92_INTERVAL_MONTH = LongInt($00000010);
  SQL_DL_SQL92_INTERVAL_DAY = LongInt($00000020);
  SQL_DL_SQL92_INTERVAL_HOUR = LongInt($00000040);
  SQL_DL_SQL92_INTERVAL_MINUTE = LongInt($00000080);
  SQL_DL_SQL92_INTERVAL_SECOND = LongInt($00000100);
  SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = LongInt($00000200);
  SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = LongInt($00000400);
  SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = LongInt($00000800);
  SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = LongInt($00001000);
  SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = LongInt($00002000);
  SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = LongInt($00004000);
  SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = LongInt($00008000);

  { SQL_CATALOG_LOCATION values }
  SQL_CL_START = SQL_QL_START;
  SQL_CL_END = SQL_QL_END;

  { values for SQL_BATCH_ROW_COUNT }
  SQL_BRC_PROCEDURES = $0000001;
  SQL_BRC_EXPLICIT = $0000002;
  SQL_BRC_ROLLED_UP = $0000004;

  { bitmasks for SQL_BATCH_SUPPORT }
  SQL_BS_SELECT_EXPLICIT = LongInt($00000001);
  SQL_BS_ROW_COUNT_EXPLICIT = LongInt($00000002);
  SQL_BS_SELECT_PROC = LongInt($00000004);
  SQL_BS_ROW_COUNT_PROC = LongInt($00000008);

  { Values for SQL_PARAM_ARRAY_ROW_COUNTS getinfo }
  SQL_PARC_BATCH = 1;
  SQL_PARC_NO_BATCH = 2;

  { Values for SQL_PARAM_ARRAY_SELECTS }
  SQL_PAS_BATCH = 1;
  SQL_PAS_NO_BATCH = 2;
  SQL_PAS_NO_SELECT = 3;

  { Bitmasks for SQL_INDEX_KEYWORDS }
  SQL_IK_NONE = LongInt($00000000);
  SQL_IK_ASC = LongInt($00000001);
  SQL_IK_DESC = LongInt($00000002);
  SQL_IK_ALL = (SQL_IK_ASC or SQL_IK_DESC);

  { Bitmasks for SQL_INFO_SCHEMA_VIEWS }
  SQL_ISV_ASSERTIONS = LongInt($00000001);
  SQL_ISV_CHARACTER_SETS = LongInt($00000002);
  SQL_ISV_CHECK_CONSTRAINTS = LongInt($00000004);
  SQL_ISV_COLLATIONS = LongInt($00000008);
  SQL_ISV_COLUMN_DOMAIN_USAGE = LongInt($00000010);
  SQL_ISV_COLUMN_PRIVILEGES = LongInt($00000020);
  SQL_ISV_COLUMNS = LongInt($00000040);
  SQL_ISV_CONSTRAINT_COLUMN_USAGE = LongInt($00000080);
  SQL_ISV_CONSTRAINT_TABLE_USAGE = LongInt($00000100);
  SQL_ISV_DOMAIN_CONSTRAINTS = LongInt($00000200);
  SQL_ISV_DOMAINS = LongInt($00000400);
  SQL_ISV_KEY_COLUMN_USAGE = LongInt($00000800);
  SQL_ISV_REFERENTIAL_CONSTRAINTS = LongInt($00001000);
  SQL_ISV_SCHEMATA = LongInt($00002000);
  SQL_ISV_SQL_LANGUAGES = LongInt($00004000);
  SQL_ISV_TABLE_CONSTRAINTS = LongInt($00008000);
  SQL_ISV_TABLE_PRIVILEGES = LongInt($00010000);
  SQL_ISV_TABLES = LongInt($00020000);
  SQL_ISV_TRANSLATIONS = LongInt($00040000);
  SQL_ISV_USAGE_PRIVILEGES = LongInt($00080000);
  SQL_ISV_VIEW_COLUMN_USAGE = LongInt($00100000);
  SQL_ISV_VIEW_TABLE_USAGE = LongInt($00200000);
  SQL_ISV_VIEWS = LongInt($00400000);

  { Bitmasks for SQL_ASYNC_MODE }
  SQL_AM_NONE = 0;
  SQL_AM_CONNECTION = 1;
  SQL_AM_STATEMENT = 2;

  { Bitmasks for SQL_ALTER_DOMAIN }
  SQL_AD_CONSTRAINT_NAME_DEFINITION = LongInt($00000001);
  SQL_AD_ADD_DOMAIN_CONSTRAINT = LongInt($00000002);
  SQL_AD_DROP_DOMAIN_CONSTRAINT = LongInt($00000004);
  SQL_AD_ADD_DOMAIN_DEFAULT = LongInt($00000008);
  SQL_AD_DROP_DOMAIN_DEFAULT = LongInt($00000010);
  SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = LongInt($00000020);
  SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = LongInt($00000040);
  SQL_AD_ADD_CONSTRAINT_DEFERRABLE = LongInt($00000080);
  SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = LongInt($00000100);

  { SQL_CREATE_SCHEMA bitmasks }
  SQL_CS_CREATE_SCHEMA = LongInt($00000001);
  SQL_CS_AUTHORIZATION = LongInt($00000002);
  SQL_CS_DEFAULT_CHARACTER_SET = LongInt($00000004);

  { SQL_CREATE_TRANSLATION bitmasks }
  SQL_CTR_CREATE_TRANSLATION = LongInt($00000001);

  { SQL_CREATE_ASSERTION bitmasks }
  SQL_CA_CREATE_ASSERTION = LongInt($00000001);
  SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = LongInt($00000010);
  SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = LongInt($00000020);
  SQL_CA_CONSTRAINT_DEFERRABLE = LongInt($00000040);
  SQL_CA_CONSTRAINT_NON_DEFERRABLE = LongInt($00000080);

  { SQL_CREATE_CHARACTER_SET bitmasks }
  SQL_CCS_CREATE_CHARACTER_SET = LongInt($00000001);
  SQL_CCS_COLLATE_CLAUSE = LongInt($00000002);
  SQL_CCS_LIMITED_COLLATION = LongInt($00000004);

  { SQL_CREATE_COLLATION bitmasks }
  SQL_CCOL_CREATE_COLLATION = LongInt($00000001);

  { SQL_CREATE_DOMAIN bitmasks }
  SQL_CDO_CREATE_DOMAIN = LongInt($00000001);
  SQL_CDO_DEFAULT = LongInt($00000002);
  SQL_CDO_CONSTRAINT = LongInt($00000004);
  SQL_CDO_COLLATION = LongInt($00000008);
  SQL_CDO_CONSTRAINT_NAME_DEFINITION = LongInt($00000010);
  SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = LongInt($00000020);
  SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = LongInt($00000040);
  SQL_CDO_CONSTRAINT_DEFERRABLE = LongInt($00000080);
  SQL_CDO_CONSTRAINT_NON_DEFERRABLE = LongInt($00000100);

  { SQL_CREATE_TABLE bitmasks }
  SQL_CT_CREATE_TABLE = LongInt($00000001);
  SQL_CT_COMMIT_PRESERVE = LongInt($00000002);
  SQL_CT_COMMIT_DELETE = LongInt($00000004);
  SQL_CT_GLOBAL_TEMPORARY = LongInt($00000008);
  SQL_CT_LOCAL_TEMPORARY = LongInt($00000010);
  SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = LongInt($00000020);
  SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = LongInt($00000040);
  SQL_CT_CONSTRAINT_DEFERRABLE = LongInt($00000080);
  SQL_CT_CONSTRAINT_NON_DEFERRABLE = LongInt($00000100);
  SQL_CT_COLUMN_CONSTRAINT = LongInt($00000200);
  SQL_CT_COLUMN_DEFAULT = LongInt($00000400);
  SQL_CT_COLUMN_COLLATION = LongInt($00000800);
  SQL_CT_TABLE_CONSTRAINT = LongInt($00001000);
  SQL_CT_CONSTRAINT_NAME_DEFINITION = LongInt($00002000);

  { SQL_DDL_INDEX bitmasks }
  SQL_DI_CREATE_INDEX = LongInt($00000001);
  SQL_DI_DROP_INDEX = LongInt($00000002);

  { SQL_DROP_COLLATION bitmasks }
  SQL_DC_DROP_COLLATION = LongInt($00000001);

  { SQL_DROP_DOMAIN bitmasks }
  SQL_DD_DROP_DOMAIN = LongInt($00000001);
  SQL_DD_RESTRICT = LongInt($00000002);
  SQL_DD_CASCADE = LongInt($00000004);

  { SQL_DROP_SCHEMA bitmasks }
  SQL_DS_DROP_SCHEMA = LongInt($00000001);
  SQL_DS_RESTRICT = LongInt($00000002);
  SQL_DS_CASCADE = LongInt($00000004);

  { SQL_DROP_CHARACTER_SET bitmasks }
  SQL_DCS_DROP_CHARACTER_SET = LongInt($00000001);

  { SQL_DROP_ASSERTION bitmasks }
  SQL_DA_DROP_ASSERTION = LongInt($00000001);

  { SQL_DROP_TABLE bitmasks }
  SQL_DT_DROP_TABLE = LongInt($00000001);
  SQL_DT_RESTRICT = LongInt($00000002);
  SQL_DT_CASCADE = LongInt($00000004);

  { SQL_DROP_TRANSLATION bitmasks }
  SQL_DTR_DROP_TRANSLATION = LongInt($00000001);

  { SQL_DROP_VIEW bitmasks }
  SQL_DV_DROP_VIEW = LongInt($00000001);
  SQL_DV_RESTRICT = LongInt($00000002);
  SQL_DV_CASCADE = LongInt($00000004);

  { SQL_INSERT_STATEMENT bitmasks }
  SQL_IS_INSERT_LITERALS = LongInt($00000001);
  SQL_IS_INSERT_SEARCHED = LongInt($00000002);
  SQL_IS_SELECT_INTO = LongInt($00000004);

  { SQL_ODBC_INTERFACE_CONFORMANCE values }
  SQL_OIC_CORE = Cardinal(1);
  SQL_OIC_LEVEL1 = Cardinal(2);
  SQL_OIC_LEVEL2 = Cardinal(3);

  { SQL_SQL92_FOREIGN_KEY_DELETE_RULE bitmasks }
  SQL_SFKD_CASCADE = LongInt($00000001);
  SQL_SFKD_NO_ACTION = LongInt($00000002);
  SQL_SFKD_SET_DEFAULT = LongInt($00000004);
  SQL_SFKD_SET_NULL = LongInt($00000008);

  { SQL_SQL92_FOREIGN_KEY_UPDATE_RULE bitmasks }
  SQL_SFKU_CASCADE = LongInt($00000001);
  SQL_SFKU_NO_ACTION = LongInt($00000002);
  SQL_SFKU_SET_DEFAULT = LongInt($00000004);
  SQL_SFKU_SET_NULL = LongInt($00000008);

  { SQL_SQL92_GRANT	bitmasks }
  SQL_SG_USAGE_ON_DOMAIN = LongInt($00000001);
  SQL_SG_USAGE_ON_CHARACTER_SET = LongInt($00000002);
  SQL_SG_USAGE_ON_COLLATION = LongInt($00000004);
  SQL_SG_USAGE_ON_TRANSLATION = LongInt($00000008);
  SQL_SG_WITH_GRANT_OPTION = LongInt($00000010);
  SQL_SG_DELETE_TABLE = LongInt($00000020);
  SQL_SG_INSERT_TABLE = LongInt($00000040);
  SQL_SG_INSERT_COLUMN = LongInt($00000080);
  SQL_SG_REFERENCES_TABLE = LongInt($00000100);
  SQL_SG_REFERENCES_COLUMN = LongInt($00000200);
  SQL_SG_SELECT_TABLE = LongInt($00000400);
  SQL_SG_UPDATE_TABLE = LongInt($00000800);
  SQL_SG_UPDATE_COLUMN = LongInt($00001000);

  { SQL_SQL92_PREDICATES bitmasks }
  SQL_SP_EXISTS = LongInt($00000001);
  SQL_SP_ISNOTNULL = LongInt($00000002);
  SQL_SP_ISNULL = LongInt($00000004);
  SQL_SP_MATCH_FULL = LongInt($00000008);
  SQL_SP_MATCH_PARTIAL = LongInt($00000010);
  SQL_SP_MATCH_UNIQUE_FULL = LongInt($00000020);
  SQL_SP_MATCH_UNIQUE_PARTIAL = LongInt($00000040);
  SQL_SP_OVERLAPS = LongInt($00000080);
  SQL_SP_UNIQUE = LongInt($00000100);
  SQL_SP_LIKE = LongInt($00000200);
  SQL_SP_IN = LongInt($00000400);
  SQL_SP_BETWEEN = LongInt($00000800);
  SQL_SP_COMPARISON = LongInt($00001000);
  SQL_SP_QUANTIFIED_COMPARISON = LongInt($00002000);

  { SQL_SQL92_RELATIONAL_JOIN_OPERATORS bitmasks }
  SQL_SRJO_CORRESPONDING_CLAUSE = LongInt($00000001);
  SQL_SRJO_CROSS_JOIN = LongInt($00000002);
  SQL_SRJO_EXCEPT_JOIN = LongInt($00000004);
  SQL_SRJO_FULL_OUTER_JOIN = LongInt($00000008);
  SQL_SRJO_INNER_JOIN = LongInt($00000010);
  SQL_SRJO_INTERSECT_JOIN = LongInt($00000020);
  SQL_SRJO_LEFT_OUTER_JOIN = LongInt($00000040);
  SQL_SRJO_NATURAL_JOIN = LongInt($00000080);
  SQL_SRJO_RIGHT_OUTER_JOIN = LongInt($00000100);
  SQL_SRJO_UNION_JOIN = LongInt($00000200);

  { SQL_SQL92_REVOKE bitmasks }
  SQL_SR_USAGE_ON_DOMAIN = LongInt($00000001);
  SQL_SR_USAGE_ON_CHARACTER_SET = LongInt($00000002);
  SQL_SR_USAGE_ON_COLLATION = LongInt($00000004);
  SQL_SR_USAGE_ON_TRANSLATION = LongInt($00000008);
  SQL_SR_GRANT_OPTION_FOR = LongInt($00000010);
  SQL_SR_CASCADE = LongInt($00000020);
  SQL_SR_RESTRICT = LongInt($00000040);
  SQL_SR_DELETE_TABLE = LongInt($00000080);
  SQL_SR_INSERT_TABLE = LongInt($00000100);
  SQL_SR_INSERT_COLUMN = LongInt($00000200);
  SQL_SR_REFERENCES_TABLE = LongInt($00000400);
  SQL_SR_REFERENCES_COLUMN = LongInt($00000800);
  SQL_SR_SELECT_TABLE = LongInt($00001000);
  SQL_SR_UPDATE_TABLE = LongInt($00002000);
  SQL_SR_UPDATE_COLUMN = LongInt($00004000);

  { SQL_SQL92_ROW_VALUE_CONSTRUCTOR bitmasks }
  SQL_SRVC_VALUE_EXPRESSION = LongInt($00000001);
  SQL_SRVC_NULL = LongInt($00000002);
  SQL_SRVC_DEFAULT = LongInt($00000004);
  SQL_SRVC_ROW_SUBQUERY = LongInt($00000008);

  { SQL_SQL92_VALUE_EXPRESSIONS bitmasks }
  SQL_SVE_CASE = LongInt($00000001);
  SQL_SVE_CAST = LongInt($00000002);
  SQL_SVE_COALESCE = LongInt($00000004);
  SQL_SVE_NULLIF = LongInt($00000008);

  { SQL_STANDARD_CLI_CONFORMANCE bitmasks }
  SQL_SCC_XOPEN_CLI_VERSION1 = LongInt($00000001);
  SQL_SCC_ISO92_CLI = LongInt($00000002);

  { SQL_UNION_STATEMENT bitmasks }
  SQL_US_UNION = SQL_U_UNION;
  SQL_US_UNION_ALL = SQL_U_UNION_ALL;

  { SQL_DTC_TRANSITION_COST bitmasks }
  SQL_DTC_ENLIST_EXPENSIVE = LongInt($00000001);
  SQL_DTC_UNENLIST_EXPENSIVE = LongInt($00000002);


  { additional SQLDataSources fetch directions }
  SQL_FETCH_FIRST_USER = 31;
  SQL_FETCH_FIRST_SYSTEM = 32;

  { Defines for SQLSetPos }
  SQL_ENTIRE_ROWSET = 0;

  { Operations in SQLSetPos }
  SQL_POSITION = 0;                               {      1.0 FALSE }
  SQL_REFRESH = 1;                                {      1.0 TRUE }
  SQL_UPDATE = 2;
  SQL_DELETE = 3;

  { Operations in SQLBulkOperations }
  SQL_ADD = 4;
  SQL_SETPOS_MAX_OPTION_VALUE = SQL_ADD;
  SQL_UPDATE_BY_BOOKMARK = 5;
  SQL_DELETE_BY_BOOKMARK = 6;
  SQL_FETCH_BY_BOOKMARK = 7;

  { Lock options in SQLSetPos }
  SQL_LOCK_NO_CHANGE = 0;                         { 1.0 FALSE }
  SQL_LOCK_EXCLUSIVE = 1;                         { 1.0 TRUE }
  SQL_LOCK_UNLOCK = 2;

  SQL_SETPOS_MAX_LOCK_VALUE = SQL_LOCK_UNLOCK;


  { Macros for SQLSetPos }
  // #define SQL_POSITION_TO(hstmt,irow) SQLSetPos(hstmt,irow,SQL_POSITION,SQL_LOCK_NO_CHANGE)
  // #define SQL_LOCK_RECORD(hstmt,irow,fLock) SQLSetPos(hstmt,irow,SQL_POSITION,fLock)
  // #define SQL_REFRESH_RECORD(hstmt,irow,fLock) SQLSetPos(hstmt,irow,SQL_REFRESH,fLock)
  // #define SQL_UPDATE_RECORD(hstmt,irow) SQLSetPos(hstmt,irow,SQL_UPDATE,SQL_LOCK_NO_CHANGE)
  // #define SQL_DELETE_RECORD(hstmt,irow) SQLSetPos(hstmt,irow,SQL_DELETE,SQL_LOCK_NO_CHANGE)
  // #define SQL_ADD_RECORD(hstmt,irow) SQLSetPos(hstmt,irow,SQL_ADD,SQL_LOCK_NO_CHANGE)

  { Column types and scopes in SQLSpecialColumns.  }
  SQL_BEST_ROWID = 1;
  SQL_ROWVER = 2;

  { Defines for SQLSpecialColumns (returned in the result set)
   SQL_PC_UNKNOWN and SQL_PC_PSEUDO are defined in sql.h }
  SQL_PC_NOT_PSEUDO = 1;

  { Defines for SQLStatistics }
  SQL_QUICK = 0;
  SQL_ENSURE = 1;

  { Defines for SQLStatistics (returned in the result set)
   SQL_INDEX_CLUSTERED, SQL_INDEX_HASHED, and SQL_INDEX_OTHER are
   defined in sql.h }
  SQL_TABLE_STAT = 0;

  { Defines for SQLTables }
  SQL_ALL_CATALOGS = '%';
  SQL_ALL_SCHEMAS = '%';
  SQL_ALL_TABLE_TYPES = '%';

  { Options for SQLDriverConnect }
  SQL_DRIVER_NOPROMPT = 0;
  SQL_DRIVER_COMPLETE = 1;
  SQL_DRIVER_PROMPT = 2;
  SQL_DRIVER_COMPLETE_REQUIRED = 3;


  //{$IFDEF RC_INVOKED}
type

  TSQLDriverConnect = function(
    hdbc: SQLHDBC;
    hwnd: SQLHWND;
    szConnStrIn: PSQLCHAR;
    cbConnStrIn: SQLSMALLINT;
    szConnStrOut: PSQLCHAR;
    cbConnStrOutMax: SQLSMALLINT;
    pcbConnStrOut: PSQLSMALLINT;
    fDriverCompletion: SQLUSMALLINT): SQLRETURN; stdcall;
  // {$ENDIF} {RC_INVOKED}

const
  { Level 2 Functions }

  { SQLExtendedFetch "fFetchType" values }
  SQL_FETCH_BOOKMARK = 8;

  { SQLExtendedFetch "rgfRowStatus" element values }
  SQL_ROW_SUCCESS = 0;
  SQL_ROW_DELETED = 1;
  SQL_ROW_UPDATED = 2;
  SQL_ROW_NOROW = 3;
  SQL_ROW_ADDED = 4;
  SQL_ROW_ERROR = 5;
  SQL_ROW_SUCCESS_WITH_INFO = 6;
  SQL_ROW_PROCEED = 0;
  SQL_ROW_IGNORE = 1;

  { value for SQL_DESC_ARRAY_STATUS_PTR }
  SQL_PARAM_SUCCESS = 0;
  SQL_PARAM_SUCCESS_WITH_INFO = 6;
  SQL_PARAM_ERROR = 5;
  SQL_PARAM_UNUSED = 7;
  SQL_PARAM_DIAG_UNAVAILABLE = 1;

  SQL_PARAM_PROCEED = 0;
  SQL_PARAM_IGNORE = 1;

  { Defines for SQLForeignKeys (UPDATE_RULE and DELETE_RULE) }
  SQL_CASCADE = 0;
  SQL_RESTRICT = 1;
  SQL_SET_NULL = 2;
  SQL_NO_ACTION = 3;
  SQL_SET_DEFAULT = 4;

  { Note that the following are in a different column of SQLForeignKeys than }
  { the previous #defines.   These are for DEFERRABILITY.                    }
  SQL_INITIALLY_DEFERRED = 5;
  SQL_INITIALLY_IMMEDIATE = 6;
  SQL_NOT_DEFERRABLE = 7;

  { Defines for SQLBindParameter and SQLProcedureColumns (returned in the result set) }
  SQL_PARAM_TYPE_UNKNOWN = 0;
  SQL_PARAM_INPUT = 1;
  SQL_PARAM_INPUT_OUTPUT = 2;
  SQL_RESULT_COL = 3;
  SQL_PARAM_OUTPUT = 4;
  SQL_RETURN_VALUE = 5;

  { Defines for SQLProcedures (returned in the result set) }
  SQL_PT_UNKNOWN = 0;
  SQL_PT_PROCEDURE = 1;
  SQL_PT_FUNCTION = 2;


  // {$IFDEF RC_INVOKED}

    { This define is too large for RC }
  SQL_ODBC_KEYWORDS =
    'ABSOLUTE,ACTION,ADA,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS,' +
    'ASC,ASSERTION,AT,AUTHORIZATION,AVG,' +
    'BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG,' +
    'CHAR,CHAR_LENGTH,CHARACTER,CHARACTER_LENGTH,CHECK,CLOSE,COALESCE,' +
    'COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT,' +
    'CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT,' +
    'CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,' +
    'DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,' +
    'DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT,' +
    'DISTINCT,DOMAIN,DOUBLE,DROP,' +
    'ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,' +
    'EXISTS,EXTERNAL,EXTRACT,' +
    'FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FORTRAN,FOUND,FROM,FULL,' +
    'GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR,' +
    'IDENTITY,IMMEDIATE,IN,INCLUDE,INDEX,INDICATOR,INITIALLY,INNER,' +
    'INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,' +
    'JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER,' +
    'MATCH,MAX,MIN,MINUTE,MODULE,MONTH,' +
    'NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NONE,NOT,NULL,NULLIF,NUMERIC,' +
    'OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS,' +
    'PAD,PARTIAL,PASCAL,PLI,POSITION,PRECISION,PREPARE,PRESERVE,' +
    'PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC,' +
    'READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWS' +
    'SCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE,' +
    'SMALLINT,SOME,SPACE,SQL,SQLCA,SQLCODE,SQLERROR,SQLSTATE,SQLWARNING,' +
    'SUBSTRING,SUM,SYSTEM_USER,' +
    'TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,' +
    'TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE,' +
    'UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING,' +
    'VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE,' +
    'YEAR,ZONE';


type

  TSQLBrowseConnect = function(
    hdbc: SQLHDBC;
    szConnStrIn: PSQLCHAR;
    cbConnStrIn: SQLSMALLINT;
    szConnStrOut: PSQLCHAR;
    cbConnStrOutMax: SQLSMALLINT;
    pcbConnStrOut: PSQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLBulkOperations = function(
    StatementHandle: SQLHSTMT;
    Operation: SQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLColAttributes = function(
    hstmt: SQLHSTMT;
    icol: SQLUSMALLINT;
    fDescType: SQLUSMALLINT;
    rgbDesc: SQLPOINTER;
    cbDescMax: SQLSMALLINT;
    pcbDesc: PSQLSMALLINT;
    pfDesc: PSQLINTEGER
    ): SQLRETURN; stdcall;

  TSQLColumnPrivileges = function(
    hstmt: SQLHSTMT;
    szCatalogName: PSQLCHAR;
    cbCatalogName: SQLSMALLINT;
    szSchemaName: PSQLCHAR;
    cbSchemaName: SQLSMALLINT;
    szTableName: PSQLCHAR;
    cbTableName: SQLSMALLINT;
    szColumnName: PSQLCHAR;
    cbColumnName: SQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLDescribeParam = function(
    hstmt: SQLHSTMT;
    ipar: SQLUSMALLINT;
    pfSqlType: PSQLSMALLINT;
    pcbParamDef: PSQLUINTEGER;
    pibScale: PSQLSMALLINT;
    pfNullable: PSQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLExtendedFetch = function(
    hstmt: SQLHSTMT;
    fFetchType: SQLUSMALLINT;
    irow: SQLINTEGER;
    pcrow: PSQLUINTEGER;
    rgfRowStatus: PSQLUSMALLINT
    ): SQLRETURN; stdcall;

  TSQLForeignKeys = function(
    hstmt: SQLHSTMT;
    szPkCatalogName: PSQLCHAR;
    cbPkCatalogName: SQLSMALLINT;
    szPkSchemaName: PSQLCHAR;
    cbPkSchemaName: SQLSMALLINT;
    szPkTableName: PSQLCHAR;
    cbPkTableName: SQLSMALLINT;
    szFkCatalogName: PSQLCHAR;
    cbFkCatalogName: SQLSMALLINT;
    szFkSchemaName: PSQLCHAR;
    cbFkSchemaName: SQLSMALLINT;
    szFkTableName: PSQLCHAR;
    cbFkTableName: SQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLMoreResults = function(
    hstmt: SQLHSTMT
    ): SQLRETURN; stdcall;

  TSQLNativeSql = function(
    hdbc: SQLHDBC;
    szSqlStrIn: PSQLCHAR;
    cbSqlStrIn: SQLINTEGER;
    szSqlStr: PSQLCHAR;
    cbSqlStrMax: SQLINTEGER;
    pcbSqlStr: PSQLINTEGER
    ): SQLRETURN; stdcall;

  TSQLNumParams = function(
    hstmt: SQLHSTMT;
    pcpar: PSQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLParamOptions = function(
    hstmt: SQLHSTMT;
    crow: SQLUINTEGER;
    pirow: PSQLUINTEGER
    ): SQLRETURN; stdcall;

  TSQLPrimaryKeys = function(
    hstmt: SQLHSTMT;
    szCatalogName: PSQLCHAR;
    cbCatalogName: SQLSMALLINT;
    szSchemaName: PSQLCHAR;
    cbSchemaName: SQLSMALLINT;
    szTableName: PSQLCHAR;
    cbTableName: SQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLProcedureColumns = function(
    hstmt: SQLHSTMT;
    szCatalogName: PSQLCHAR;
    cbCatalogName: SQLSMALLINT;
    szSchemaName: PSQLCHAR;
    cbSchemaName: SQLSMALLINT;
    szProcName: PSQLCHAR;
    cbProcName: SQLSMALLINT;
    szColumnName: PSQLCHAR;
    cbColumnName: SQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLProcedures = function(
    hstmt: SQLHSTMT;
    szCatalogName: PSQLCHAR;
    cbCatalogName: SQLSMALLINT;
    szSchemaName: PSQLCHAR;
    cbSchemaName: SQLSMALLINT;
    szProcName: PSQLCHAR;
    cbProcName: SQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLSetPos = function(
    hstmt: SQLHSTMT;
    irow: SQLUSMALLINT;
    fOption: SQLUSMALLINT;
    fLock: SQLUSMALLINT
    ): SQLRETURN; stdcall;

  TSQLTablePrivileges = function(
    hstmt: SQLHSTMT;
    szCatalogName: PSQLCHAR;
    cbCatalogName: SQLSMALLINT;
    szSchemaName: PSQLCHAR;
    cbSchemaName: SQLSMALLINT;
    szTableName: PSQLCHAR;
    cbTableName: SQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLDrivers = function(
    henv: SQLHENV;
    fDirection: SQLUSMALLINT;
    szDriverDesc: PSQLCHAR;
    cbDriverDescMax: SQLSMALLINT;
    pcbDriverDesc: PSQLSMALLINT;
    szDriverAttributes: PSQLCHAR;
    cbDrvrAttrMax: SQLSMALLINT;
    pcbDrvrAttr: PSQLSMALLINT
    ): SQLRETURN; stdcall;

  TSQLBindParameter = function(
    hstmt: SQLHSTMT;
    ipar: SQLUSMALLINT;
    fParamType: SQLSMALLINT;
    fCType: SQLSMALLINT;
    fSqlType: SQLSMALLINT;
    cbColDef: SQLUINTEGER;
    ibScale: SQLSMALLINT;
    rgbValue: SQLPOINTER;
    cbValueMax: SQLINTEGER;
    pcbValue: PSQLINTEGER
    ): SQLRETURN; stdcall;

  // {$ENDIF} {RC_INVOKED}


  {---------------------------------------------------------}
  { SQLAllocHandleStd is implemented to make SQLAllocHandle }
  { compatible with X/Open standard.	 an application should }
  { not call SQLAllocHandleStd directly					   }
  {---------------------------------------------------------}

{$IFDEF ODBC_STD}
  // #define SQLAllocHandle  SQLAllocHandleStd
  // #define SQLAllocEnv(phenv)  SQLAllocHandleStd(SQL_HANDLE_ENV, SQL_NULL_HANDLE, phenv)

const
  { Internal type subcodes }
  SQL_YEAR = SQL_CODE_YEAR;
  SQL_MONTH = SQL_CODE_MONTH;
  SQL_DAY = SQL_CODE_DAY;
  SQL_HOUR = SQL_CODE_HOUR;
  SQL_MINUTE = SQL_CODE_MINUTE;
  SQL_SECOND = SQL_CODE_SECOND;
  SQL_YEAR_TO_MONTH = SQL_CODE_YEAR_TO_MONTH;
  SQL_DAY_TO_HOUR = SQL_CODE_DAY_TO_HOUR;
  SQL_DAY_TO_MINUTE = SQL_CODE_DAY_TO_MINUTE;
  SQL_DAY_TO_SECOND = SQL_CODE_DAY_TO_SECOND;
  SQL_HOUR_TO_MINUTE = SQL_CODE_HOUR_TO_MINUTE;
  SQL_HOUR_TO_SECOND = SQL_CODE_HOUR_TO_SECOND;
  SQL_MINUTE_TO_SECOND = SQL_CODE_MINUTE_TO_SECOND;
{$ENDIF}                                          { ODBC_STD }


  // {$IFDEF RC_INVOKED}
type
  TSQLAllocHandleStd = function(
    fHandleType: SQLSMALLINT;
    hInput: SQLHANDLE;
    phOutput: PSQLHANDLE
    ): SQLRETURN; stdcall;
  // {$ENDIF} { RC_INVOKED }

const
  {      Deprecated defines from prior versions of ODBC }
  SQL_DATABASE_NAME = 16;                         { Use SQLGetConnectOption/SQL_CURRENT_QUALIFIER }
  SQL_FD_FETCH_PREV = SQL_FD_FETCH_PRIOR;
  SQL_FETCH_PREV = SQL_FETCH_PRIOR;
  SQL_CONCUR_TIMESTAMP = SQL_CONCUR_ROWVER;
  SQL_SCCO_OPT_TIMESTAMP = SQL_SCCO_OPT_ROWVER;
  SQL_CC_DELETE = SQL_CB_DELETE;
  SQL_CR_DELETE = SQL_CB_DELETE;
  SQL_CC_CLOSE = SQL_CB_CLOSE;
  SQL_CR_CLOSE = SQL_CB_CLOSE;
  SQL_CC_PRESERVE = SQL_CB_PRESERVE;
  SQL_CR_PRESERVE = SQL_CB_PRESERVE;
  { SQL_FETCH_RESUME is not supported by 2.0+ drivers
  #define SQL_FETCH_RESUME                7
  }
  SQL_SCROLL_FORWARD_ONLY = LongInt(0);           {-SQL_CURSOR_FORWARD_ONLY }
  SQL_SCROLL_KEYSET_DRIVEN = LongInt(-1);         {-SQL_CURSOR_KEYSET_DRIVEN }
  SQL_SCROLL_DYNAMIC = LongInt(-2);               {-SQL_CURSOR_DYNAMIC }
  SQL_SCROLL_STATIC = LongInt(-3);                {-SQL_CURSOR_STATIC }


implementation


function SQL_LEN_DATA_AT_EXEC(length: Integer): Integer;
begin
  Result := -(length) + SQL_LEN_DATA_AT_EXEC_OFFSET;
end;

function SQL_LEN_BINARY_ATTR(length: Integer): Integer;
begin
  Result := -(length) + SQL_LEN_BINARY_ATTR_OFFSET;
end;


end.
